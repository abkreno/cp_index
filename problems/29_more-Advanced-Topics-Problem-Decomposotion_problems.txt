1. UVa 00714 - Copying Books (binary search the answer + greedy)
2. UVa 01221 - Against Mammoths (LA 3795, Tehran06, binary search the answer + MCBM (perfect matching); use the augmenting path algorithm to compute MCBM—see Section 4.7.4)
3. UVa 01280 - Curvy Little Bottles (LA 6027, World Finals Warsaw12, binary search the answer and geometric formula)
4. UVa 10372 - Leaps Tall Buildings ... (binary search the answer + Physics)
5. UVa 10566 - Crossed Ladders (bisection method)
6. UVa 10606 - Opening Doors (the solution is simply the highest square number ≤ N , but this problem involves BigInteger; we use a (rather slow) binary √ search the answer technique to obtain N )
7. UVa 10668 - Expanding Rods (bisection method)
8. UVa 10804 - Gopher Strategy (similar to UVa 11262)
9. UVa 10816 - Travel in Desert (binary search the answer + Dijkstra’s)
10. UVa 10983 - Buy one, get ... * (binary search the answer + max flow)
11. UVa 11262 - Weird Fence * (binary search the answer + MCBM)
12. UVa 11516 - WiFi * (binary search the answer + greedy)
13. UVa 11646 - Athletics Track (the circle is at the center of track)
14. UVa 12428 - Enemy at the Gates (binary search the answer + a bit of graph theory about bridges as outlined in Chapter 4)
15. IOI 2009 - Mecho (binary search the answer + BFS)

1. UVa 00967 - Circular (similar to UVa 897, but this time the output part can be speed up using DP 1D range sum)
2. UVa 10200 - Prime Time (complete search, test if isPrime(n 2 + n + 41) ∀n ∈ [a..b]; FYI, this prime generating formula n 2 + n + 41 was found by Leonhard Euler; for 0 ≤ n ≤ 40, it works; however, it does not have good accuracy for larger n; finally use DP 1D RSQ to speed up the solution)
3. UVa 10533 - Digit Primes (sieve; check if a prime is a digit prime; DP 1D range sum)
4. UVa 10871 - Primed Subsequence (need 1D Range Sum Query)
5. UVa 10891 - Game of Sum * (Double DP; The first DP is the standard 1D Range Sum Query between two indices: i, j. The second DP evaluates the Decision Tree with state (i, j) and try all splitting points; minimax.)
6. UVa 11105 - Semi-prime H-numbers * (need 1D Range Sum Query)
7. UVa 11408 - Count DePrimes * (need 1D Range Sum Query)
8. UVa 11491 - Erasing and Winning (greedy, optimized with Sparse Table data structure to deal with the static RMQ)
9. UVa 12028 - A Gift from ... (generate the array; sort it; prepare 1D Range Sum Query; then the solution will be much simpler)

1. UVa 00976 - Bridge Building * (use a kind of flood fill to separate north and south banks; use it to compute the cost of installing a bridge at each column; a DP solution should be quite obvious after this preprocessing)
2. UVa 10917 - A Walk Through the Forest (counting paths in DAG; but first, you have to build the DAG by running Dijkstra’s algorithm from ‘home’)
3. UVa 10937 - Blackbeard the Pirate (BFS → TSP, then DP or backtracking; discussed in this section)
4. UVa 10944 - Nuts for nuts.. (BFS → TSP, then use DP, n ≤ 16)
5. UVa 11324 - The Largest Clique * (longest paths on DAG; but first, you have to transform the graph into DAG of its SCCs; toposort)
6. UVa 11405 - Can U Win? * (BFS from ‘k’ & each ‘P’—max 9 items; then use DP-TSP)
7. UVa 11693 - Speedy Escape (compute shotest paths information using Floyd Warshall’s; then use DP)
8. UVa 11813 - Shopping (Dijsktra’s → TSP, then use DP, n ≤ 10)

1. UVa 00273 - Jack Straw (line segment intersection and Warshall’s transitive closure algorithm)
2. UVa 00521 - Gossiping (build a graph; the vertices are drivers; give an edge between two drivers if they can meet; this is determined with mathematical rule (gcd); if the graph is connected, then the answer is ‘yes’)
3. UVa 01039 - Simplified GSM Network (LA 3270, World Finals Shanghai05, build the graph with simple geometry; then use Floyd Warshall’s)
4. UVa 01092 - Tracking Bio-bots * (LA 4787, World Finals Harbin10, compress the graph first; do graph traversal from exit using only south and west direction; inclusion-exclusion)
5. UVa 01243 - Polynomial-time Red... (LA 4272, Hefei08, Floyd Warshall’s transitive closure, SCC, transitive reduction of a directed graph)
6. UVa 01263 - Mines (LA 4846, Daejeon10, geometry, SCC, see two related problems: UVa 11504 & 11770)
7. UVa 10075 - Airlines (gcDistance—see Section 9.11—with APSP)
8. UVa 10307 - Killing Aliens in Borg Maze (build SSSP graph with BFS, MST)
9. UVa 11267 - The ‘Hire-a-Coder’ ... (bipartite check, MST accept -ve weight)
10. UVa 11635 - Hotel Booking * (Dijkstra’s + BFS)
11. UVa 11721 - Instant View ... (find nodes that can reach SCCs with neg cycle)
12. UVa 11730 - Number Transformation (prime factoring, see Section 5.5.1)
13. UVa 12070 - Invite Your Friends (LA 3290, Dhaka05, BFS + Dijkstra’s)
14. UVa 12101 - Prime Path (BFS, involving prime numbers)
15. UVa 12159 - Gun Fight * (LA 4407, KualaLumpur08, geometry, MCBM)

1. UVa 01195 - Calling Extraterrestrial ... (LA 2565, Kanazawa02, use sieve to generate the list of primes, brute force each prime p and use binary search to find the corresponding pair q)
2. UVa 10325 - The Lottery (inclusion exclusion principle, brute force subset for small M ≤ 15, lcm-gcd)
3. UVa 10427 - Naughty Sleepy ... (numbers in [10 (k−1) ..10 k -1] has k digits)
4. UVa 10539 - Almost Prime Numbers * (sieve; get ‘almost primes’: non prime numbers that are divisible by only a single prime number; we can get a list of ‘almost primes’ by listing the powers of each prime, e.g. 3 is a prime number, so 3 2 = 9, 3 3 = 27, 3 4 = 81, etc are ‘almost primes’; we can then sort these ‘almost primes’; and then do binary search)
5. UVa 10637 - Coprimes * (involving prime numbers and gcd)
6. UVa 10717 - Mint * (complete search + GCD/LCM, see Section 5.5.2)
7. UVa 11282 - Mixing Invitations (derangement and binomial coefficient, use Java BigInteger)
8. UVa 11415 - Count the Factorials (count the number of factors for each integer, use it to find the number of factors for each factorial number and store it in an array; for each query, search in the array to find the first element with that value with binary search)
9. UVa 11428 - Cubes (complete search + binary search)

1. UVa 00142 - Mouse Clicks (brute force; point-in-rectangle; dist)
2. UVa 00184 - Laser Lines (brute force; collinear test)
3. UVa 00201 - Square (counting square of various sizes; try all)
4. UVa 00270 - Lining Up (gradient sorting, complete search)
5. UVa 00356 - Square Pegs And Round ... (Euclidean distance, brute force)
6. UVa 00638 - Finding Rectangles (brute force 4 corner points)
7. UVa 00688 - Mobile Phone Coverage (brute force; chop the region into small rectangles and decide if a small rectangle is covered by an antenna or not; if it is, add the area of that small rectangle to the answer)
8. UVa 10012 - How Big Is It? * (try all 8! permutations, Euclidean dist)
9. UVa 10167 - Birthday Cake (brute force A and B, ccw tests)
10. UVa 10301 - Rings and Glue (circle-circle intersection, backtracking)
11. UVa 10310 - Dog and Gopher (complete search, Euclidean distance dist)
12. UVa 10823 - Of Circles and Squares (complete search; check if point inside circles/squares)
13. UVa 11227 - The silver bullet * (brute force; collinear test)
14. UVa 11515 - Cranes (circle-circle intersection, backtracking)
15. UVa 11574 - Colliding Traffic * (brute force all pairs of boats; if one pair already collide, the answer is 0.0; otherwise derive a quadratic equation to detect when these two boats will collide, if they will; pick the minimum collision time overall; if there is no collision, output ‘No collision.’)

1. UVa 00843 - Crypt Kicker (backtracking; try mapping each letter to another letter in alphabet; use Trie data structure (see Section 6.6) to speed up if a certain (partial) word is in the dictionary)
2. UVa 00922 - Rectangle by the Ocean (first, compute the area of the polygon; then for every pair of points, define a rectangle with those 2 points; use set to check whether a third point of the rectangle is on the polygon; check whether it is better than the current best)
3. UVa 10734 - Triangle Partitioning (this is actually a geometry problem involving triangle/cosine rule, but we use a data structure that tolerates floating point imprecision due to triangle side normalization to make sure we count each triangle only once)
4. UVa 11474 - Dying Tree * (use union find; first, connect all branches in the tree; next, connect one tree with another tree if any of their branch has distance less than k (a bit of geometry); then, connect any tree that can reach any doctor; finally, check if the first branch of the first/sick tree is connected to any doctor; the code can be quite long; be careful)
5. UVa 11525 - Permutation * (can use Fenwick Tree and binary search the answer to find the lowest index i that has RSQ(1, i) = Si)
6. UVa 11960 - Divisor Game * (modified Sieve, number of divisors, static Range Maximum Query, solvable with Sparse Table data structure)
7. UVa 11966 - Galactic Bonding (use union find to keep track of the number of disjoint sets/constellations; if Euclidian dist ≤ D, union the two stars)
8. UVa 11967 - Hic-Hac-Hoe (simple brute force, but we need to use C++ STL map as we cannot store the actual tic-tac-toe board; we only remember n coordinates and check if there are k consecutive coordinates that belong to any one player)
9. UVa 12318 - Digital Roulette (brute force with set data structure)
10. UVa 12460 - Careful teacher (BFS problem but needs set of string data structure to speed up)

1. UVa 00295 - Fatman * (binary search the answer x for this question: if the person is of diameter x, can he go from left to right? for any pair ofobstacles (including the top and bottom walls), lay an edge between them if the person cannot go between them and check if the top and bottom wall are disconnected → person with diameter x can pass; Euclidian distance)
2. UVa 00811 - The Fortified Forest (LA 5211, World Finals Eindhoven99, CH, perimeter of polygon, generate all subsets iteratively with bitmask)
3. UVa 01040 - The Traveling Judges * (LA 3271, World Finals Shang- hai05, iterative complete search, try all subsets of 2 20 cities, form MST with those cities with help of Union-Find DS, complex output formatting)
4. UVa 01079 - A Careful Approach (LA 4445, World Finals Stockholm09, discussed in this chapter)
5. UVa 01093 - Castles (LA 4788, World Finals Harbin10, try all possible roots, DP on tree)
6. UVa 01250 - Robot Challenge (LA 4607, SoutheastUSA09, geometry, SSSP on DAG → DP, DP 1D range sum)
7. UVa 10856 - Recover Factorial (discussed in this section)
8. UVa 10876 - Factory Robot (binary search the answer + geometry, Euclidian distance + union find, similar idea with UVa 295)
9. UVa 11610 - Reverse Prime * (first, reverse primes less than 10 6 ; then, append zero(es) if necessary; use Fenwick Tree and binary search)
