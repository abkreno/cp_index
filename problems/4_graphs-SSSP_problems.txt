1. UVa 00336 - A Node Too Far (discussed in this section)
2. UVa 00383 - Shipping Routes (simple SSSP solvable with BFS, use mapper)
3. UVa 00388 - Galactic Import (key idea: we want to minimize planet movements because every edge used decreases value by 5%)
4. UVa 00429 - Word Transformation * (each word is a vertex, connect 2 words with an edge if differ by 1 letter)
5. UVa 00627 - The Net (also print the path, see discussion in this section)
6. UVa 00762 - We Ship Cheap (simple SSSP solvable with BFS, use mapper)
7. UVa 00924 - Spreading the News * (the spread is like BFS traversal)
8. UVa 01148 - The mysterious X network (LA 3502, SouthWesternEurope05, single source, single target, shortest path problem but exclude endpoints)
9. UVa 10009 - All Roads Lead Where? (simple SSSP solvable with BFS)
10. UVa 10422 - Knights in FEN (solvable with BFS)
11. UVa 10610 - Gopher and Hawks (solvable with BFS)
12. UVa 10653 - Bombs; NO they ... * (efficient BFS implementation)
13. UVa 10959 - The Party, Part I (SSSP from source 0 to the rest)

1. UVa 00314 - Robot * (state: (position, direction), transform input graph)
2. UVa 00532 - Dungeon Master (3-D BFS)
3. UVa 00859 - Chinese Checkers (BFS)
4. UVa 00949 - Getaway (interesting graph data structure twist)
5. UVa 10044 - Erdos numbers (the input parsing part is troublesome; if you encounter difficulties with this, see Section 6.2)
6. UVa 10067 - Playing with Wheels (implicit graph in problem statement)
7. UVa 10150 - Doublets (BFS state is string!)
8. UVa 10977 - Enchanted Forest (BFS with blocked states)
9. UVa 11049 - Basic Wall Maze (some restricted moves, print the path)
10. UVa 11101 - Mall Mania * (multi-sources BFS from m1, get minimum at border of m2)
11. UVa 11352 - Crazy King (filter the graph first, then it becomes SSSP)
12. UVa 11624 - Fire (multi-sources BFS)
13. UVa 11792 - Krochanska is Here (be careful with the ‘important station’)
14. UVa 12160 - Unlock the Lock * (LA 4408, KualaLumpur08, Vertices = The numbers; Link two numbers with an edge if we can use button push to transform one into another; use BFS to get the answer)

1. UVa 00929 - Number Maze * (on a 2D maze/implicit graph)
2. UVa 01112 - Mice and Maze * (LA 2425, SouthwesternEurope01, run Dijkstra’s from destination)
3. UVa 10389 - Subway (use basic geometry skill to build the weighted graph, then run Dijkstra’s)
4. UVa 10986 - Sending email * (straightforward Dijkstra’s application)

1. UVa 01202 - Finding Nemo (LA 3133, Beijing04, SSSP, Dijkstra’s on grid: treat each cell as a vertex; the idea is simple but one should be careful with the implementation)
2. UVa 10166 - Travel (this can be modeled as a shortest paths problem)
3. UVa 10187 - From Dusk Till Dawn (special cases: start = destination: 0 litre; starting or destination city not found or destination city not reachable from starting city: no route; the rest: Dijkstra’s)
4. UVa 10278 - Fire Station (Dijkstra’s from fire stations to all intersections; need pruning to pass the time limit)
5. UVa 10356 - Rough Roads (we can attach one extra information to each vertex: whether we come to that vertex using cycle or not; then, run Dijkstra’s to solve SSSP on this modified graph)
6. UVa 10603 - Fill (state: (a, b, c), source: (0, 0, c), 6 possible transitions)
7. UVa 10801 - Lift Hopping * (model the graph carefully!)
8. UVa 10967 - The Great Escape (model the graph; shortest path)
9. UVa 11338 - Minefield (it seems that the test data is weaker than what the problem description says (n ≤ 10000); we use O(n 2 ) loop to build the weighted graph and runs Dijkstra’s without getting TLE)
10. UVa 11367 - Full Tank? (discussed in this section)
11. UVa 11377 - Airport Setup (model the graph carefully: A city to other city with no airport has edge weight 1. A city to other city with airport has edge weight 0. Do Dijkstra’s from source. If the start and end city are the same and has no airport, the answer should be 0.)
12. UVa 11492 - Babel * (graph modeling; each word is a vertex; connect two vertices with an edge if they share common language and have different 1st char; connect a source vertex to all words that belong to start language; con-nect all words that belong to finish language to sink vertex; we can transfer vertex weight to edge weight; then SSSP from source vertex to sink vertex)
13. UVa 11833 - Route Change (stop Dijkstra’s at service route path plus some modification)
14. UVa 12047 - Highest Paid Toll * (clever usage of Dijkstra’s; run Dijkstra’s from source and from destination; try all edge (u, v) if dist[source][u]+ weight(u, v)+ dist[v][destination] ≤ p; record the largest edge weight found)
15. UVa 12144 - Almost Shortest Path (Dijkstra’s; store multiple predecessors)
16. IOI 2011 - Crocodile (can be modeled as an SSSP problem)

1. UVa 00558 - Wormholes * (checking the existence of negative cycle)
2. UVa 10449 - Traffic * (find the minimum weight path, which may be negative; be careful: ∞ + negative weight is lower than ∞!)
3. UVa 10557 - XYZZY * (check ‘positive’ cycle, check connectedness!)
4. UVa 11280 - Flying to Fredericton (modified Bellman Ford’s)
